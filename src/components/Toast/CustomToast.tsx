import toast, { Toast as HotToast } from 'react-hot-toast';
import './Toast.css';

export type ToastType = 'block' | 'success' | 'warning';

export interface ToastOptions {
  title?: string;
  message: string;
  action?: {
    label: string;
    onClick: () => void;
  };
  duration?: number;
}

const toastIcons = {
  block: (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M8.00004 14.6667C7.07782 14.6667 6.21115 14.4916 5.40004 14.1414C4.58893 13.7912 3.88337 13.3163 3.28337 12.7167C2.68337 12.1172 2.20849 11.4116 1.85871 10.6C1.50893 9.78848 1.33382 8.92182 1.33337 8.00004C1.33293 7.07826 1.50804 6.2116 1.85871 5.40004C2.20937 4.58849 2.68426 3.88293 3.28337 3.28337C3.88249 2.68382 4.58804 2.20893 5.40004 1.85871C6.21204 1.50849 7.07871 1.33337 8.00004 1.33337C8.92137 1.33337 9.78804 1.50849 10.6 1.85871C11.412 2.20893 12.1176 2.68382 12.7167 3.28337C13.3158 3.88293 13.7909 4.58849 14.142 5.40004C14.4932 6.2116 14.668 7.07826 14.6667 8.00004C14.6654 8.92182 14.4903 9.78848 14.1414 10.6C13.7925 11.4116 13.3176 12.1172 12.7167 12.7167C12.1158 13.3163 11.4103 13.7914 10.6 14.142C9.78982 14.4927 8.92315 14.6676 8.00004 14.6667ZM8.00004 13.3334C8.60004 13.3334 9.17782 13.2363 9.73337 13.042C10.2889 12.8478 10.8 12.5672 11.2667 12.2L3.80004 4.73337C3.43337 5.20004 3.15271 5.71115 2.95804 6.26671C2.76337 6.82226 2.66626 7.40004 2.66671 8.00004C2.66671 9.48893 3.18337 10.75 4.21671 11.7834C5.25004 12.8167 6.51115 13.3334 8.00004 13.3334ZM12.2 11.2667C12.5667 10.8 12.8474 10.2889 13.042 9.73337C13.2367 9.17782 13.3338 8.60004 13.3334 8.00004C13.3334 6.51115 12.8167 5.25004 11.7834 4.21671C10.75 3.18337 9.48893 2.66671 8.00004 2.66671C7.40004 2.66671 6.82226 2.76382 6.26671 2.95804C5.71115 3.15226 5.20004 3.43293 4.73337 3.80004L12.2 11.2667Z" fill="currentColor"/>
    </svg>
  ),
  success: (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M13.8636 4.34224C14.1209 3.93659 14.0035 3.39728 13.6016 3.13766C13.1996 2.87804 12.6652 2.99642 12.408 3.40208L7.11631 11.7462L4.53293 8.55974C4.23073 8.18699 3.68631 8.13205 3.31695 8.43703C2.94759 8.74201 2.89315 9.29142 3.19535 9.66417L6.40835 13.6272C6.84201 14.1621 7.66682 14.1136 8.03598 13.5315L13.8636 4.34224Z" fill="currentColor"/>
    </svg>
  ),
  warning: (
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M14.1163 6.42625C13.8806 6.18 13.6369 5.92625 13.545 5.70312C13.46 5.49875 13.455 5.16 13.45 4.83187C13.4406 4.22187 13.4306 3.53062 12.95 3.05C12.4694 2.56937 11.7781 2.55937 11.1681 2.55C10.84 2.545 10.5013 2.54 10.2969 2.455C10.0744 2.36312 9.82 2.11937 9.57375 1.88375C9.1425 1.46937 8.6525 1 8 1C7.3475 1 6.85812 1.46937 6.42625 1.88375C6.18 2.11937 5.92625 2.36312 5.70312 2.455C5.5 2.54 5.16 2.545 4.83187 2.55C4.22187 2.55937 3.53062 2.56937 3.05 3.05C2.56937 3.53062 2.5625 4.22187 2.55 4.83187C2.545 5.16 2.54 5.49875 2.455 5.70312C2.36312 5.92562 2.11937 6.18 1.88375 6.42625C1.46937 6.8575 1 7.3475 1 8C1 8.6525 1.46937 9.14187 1.88375 9.57375C2.11937 9.82 2.36312 10.0737 2.455 10.2969C2.54 10.5013 2.545 10.84 2.55 11.1681C2.55937 11.7781 2.56937 12.4694 3.05 12.95C3.53062 13.4306 4.22187 13.4406 4.83187 13.45C5.16 13.455 5.49875 13.46 5.70312 13.545C5.92562 13.6369 6.18 13.8806 6.42625 14.1163C6.8575 14.5306 7.3475 15 8 15C8.6525 15 9.14187 14.5306 9.57375 14.1163C9.82 13.8806 10.0737 13.6369 10.2969 13.545C10.5013 13.46 10.84 13.455 11.1681 13.45C11.7781 13.4406 12.4694 13.4306 12.95 12.95C13.4306 12.4694 13.4406 11.7781 13.45 11.1681C13.455 10.84 13.46 10.5013 13.545 10.2969C13.6369 10.0744 13.8806 9.82 14.1163 9.57375C14.5306 9.1425 15 8.6525 15 8C15 7.3475 14.5306 6.85812 14.1163 6.42625ZM7.5 5C7.5 4.86739 7.55268 4.74021 7.64645 4.64645C7.74021 4.55268 7.86739 4.5 8 4.5C8.13261 4.5 8.25979 4.55268 8.35355 4.64645C8.44732 4.74021 8.5 4.86739 8.5 5V8.5C8.5 8.63261 8.44732 8.75979 8.35355 8.85355C8.25979 8.94732 8.13261 9 8 9C7.86739 9 7.74021 8.94732 7.64645 8.85355C7.55268 8.75979 7.5 8.63261 7.5 8.5V5ZM8 11.5C7.85166 11.5 7.70666 11.456 7.58332 11.3736C7.45999 11.2912 7.36386 11.1741 7.30709 11.037C7.25032 10.9 7.23547 10.7492 7.26441 10.6037C7.29335 10.4582 7.36478 10.3246 7.46967 10.2197C7.57456 10.1148 7.7082 10.0434 7.85368 10.0144C7.99917 9.98547 8.14997 10.0003 8.28701 10.0571C8.42406 10.1139 8.54119 10.21 8.6236 10.3333C8.70601 10.4567 8.75 10.6017 8.75 10.75C8.75 10.9489 8.67098 11.1397 8.53033 11.2803C8.38968 11.421 8.19891 11.5 8 11.5Z" fill="currentColor"/>
    </svg>
  ),
};

const CustomToastComponent = ({ 
  type, 
  title: _title, 
  message, 
  action, 
  t 
}: { 
  type: ToastType; 
  title?: string; 
  message: string; 
  action?: { label: string; onClick: () => void }; 
  t: HotToast;
}) => {
  return (
    <div
      className={`toast-container toast-${type}`}
      style={{
        '--toast-opacity': t.visible ? '1' : '0',
        '--toast-transform': t.visible ? 'translateX(0)' : 'translateX(100%)',
      } as React.CSSProperties}
    >
      {/* Icon */}
      <div className="toast-icon">
        {toastIcons[type]}
      </div>

      {/* Content */}
      <div className="toast-content">
        <div className="toast-message">
          {message}
        </div>
      </div>

      {/* Action Button */}
      {action && (
        <button
          className="toast-action-button"
          onClick={() => {
            action.onClick();
            toast.dismiss(t.id);
          }}
        >
          {action.label}
        </button>
      )}
    </div>
  );
};

export const showToast = (type: ToastType, options: ToastOptions) => {
  const { title, message, action, duration = 5000 } = options;

  // Block toasts should not auto-close, they should persist until user clicks OK
  const toastDuration = type === 'block' ? Infinity : duration;

  return toast.custom((t) => (
    <CustomToastComponent
      type={type}
      title={title}
      message={message}
      action={action}
      t={t}
    />
  ), {
    duration: toastDuration,
    position: 'top-center',
  });
};

// Convenience functions for each toast type
export const showBlockToast = (options: ToastOptions) => showToast('block', options);
export const showSuccessToast = (options: ToastOptions) => showToast('success', options);
export const showWarningToast = (options: ToastOptions) => showToast('warning', options);
