/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StorageRouteImport } from './routes/storage'
import { Route as WalletRouteRouteImport } from './routes/wallet/route'
import { Route as ProfileRouteRouteImport } from './routes/profile/route'
import { Route as MarketRouteRouteImport } from './routes/market/route'
import { Route as ActivityRouteRouteImport } from './routes/activity/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StorageIndexRouteImport } from './routes/storage/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as StorageChannelsRouteImport } from './routes/storage/channels'
import { Route as StorageActivityRouteImport } from './routes/storage/activity'
import { Route as ProfileStatsRouteImport } from './routes/profile/stats'
import { Route as MarketStickersRouteImport } from './routes/market/stickers'
import { Route as MarketGiftsRouteImport } from './routes/market/gifts'
import { Route as MarketChannelsRouteImport } from './routes/market/channels'
import { Route as ActivityGiftsRouteImport } from './routes/activity/gifts'
import { Route as ActivityChannelsRouteImport } from './routes/activity/channels'
import { Route as StorageOffersReceivedRouteImport } from './routes/storage/offers/received'
import { Route as StorageOffersPlacedRouteImport } from './routes/storage/offers/placed'

const StorageRoute = StorageRouteImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => rootRouteImport,
} as any)
const WalletRouteRoute = WalletRouteRouteImport.update({
  id: '/wallet',
  path: '/wallet',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRouteRoute = ProfileRouteRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketRouteRoute = MarketRouteRouteImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivityRouteRoute = ActivityRouteRouteImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StorageIndexRoute = StorageIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StorageRoute,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileRouteRoute,
} as any)
const StorageChannelsRoute = StorageChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => StorageRoute,
} as any)
const StorageActivityRoute = StorageActivityRouteImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => StorageRoute,
} as any)
const ProfileStatsRoute = ProfileStatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => ProfileRouteRoute,
} as any)
const MarketStickersRoute = MarketStickersRouteImport.update({
  id: '/stickers',
  path: '/stickers',
  getParentRoute: () => MarketRouteRoute,
} as any)
const MarketGiftsRoute = MarketGiftsRouteImport.update({
  id: '/gifts',
  path: '/gifts',
  getParentRoute: () => MarketRouteRoute,
} as any)
const MarketChannelsRoute = MarketChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => MarketRouteRoute,
} as any)
const ActivityGiftsRoute = ActivityGiftsRouteImport.update({
  id: '/gifts',
  path: '/gifts',
  getParentRoute: () => ActivityRouteRoute,
} as any)
const ActivityChannelsRoute = ActivityChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => ActivityRouteRoute,
} as any)
const StorageOffersReceivedRoute = StorageOffersReceivedRouteImport.update({
  id: '/offers/received',
  path: '/offers/received',
  getParentRoute: () => StorageRoute,
} as any)
const StorageOffersPlacedRoute = StorageOffersPlacedRouteImport.update({
  id: '/offers/placed',
  path: '/offers/placed',
  getParentRoute: () => StorageRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activity': typeof ActivityRouteRouteWithChildren
  '/market': typeof MarketRouteRouteWithChildren
  '/profile': typeof ProfileRouteRouteWithChildren
  '/wallet': typeof WalletRouteRoute
  '/storage': typeof StorageRouteWithChildren
  '/activity/channels': typeof ActivityChannelsRoute
  '/activity/gifts': typeof ActivityGiftsRoute
  '/market/channels': typeof MarketChannelsRoute
  '/market/gifts': typeof MarketGiftsRoute
  '/market/stickers': typeof MarketStickersRoute
  '/profile/stats': typeof ProfileStatsRoute
  '/storage/activity': typeof StorageActivityRoute
  '/storage/channels': typeof StorageChannelsRoute
  '/profile/': typeof ProfileIndexRoute
  '/storage/': typeof StorageIndexRoute
  '/storage/offers/placed': typeof StorageOffersPlacedRoute
  '/storage/offers/received': typeof StorageOffersReceivedRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activity': typeof ActivityRouteRouteWithChildren
  '/market': typeof MarketRouteRouteWithChildren
  '/wallet': typeof WalletRouteRoute
  '/activity/channels': typeof ActivityChannelsRoute
  '/activity/gifts': typeof ActivityGiftsRoute
  '/market/channels': typeof MarketChannelsRoute
  '/market/gifts': typeof MarketGiftsRoute
  '/market/stickers': typeof MarketStickersRoute
  '/profile/stats': typeof ProfileStatsRoute
  '/storage/activity': typeof StorageActivityRoute
  '/storage/channels': typeof StorageChannelsRoute
  '/profile': typeof ProfileIndexRoute
  '/storage': typeof StorageIndexRoute
  '/storage/offers/placed': typeof StorageOffersPlacedRoute
  '/storage/offers/received': typeof StorageOffersReceivedRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/activity': typeof ActivityRouteRouteWithChildren
  '/market': typeof MarketRouteRouteWithChildren
  '/profile': typeof ProfileRouteRouteWithChildren
  '/wallet': typeof WalletRouteRoute
  '/storage': typeof StorageRouteWithChildren
  '/activity/channels': typeof ActivityChannelsRoute
  '/activity/gifts': typeof ActivityGiftsRoute
  '/market/channels': typeof MarketChannelsRoute
  '/market/gifts': typeof MarketGiftsRoute
  '/market/stickers': typeof MarketStickersRoute
  '/profile/stats': typeof ProfileStatsRoute
  '/storage/activity': typeof StorageActivityRoute
  '/storage/channels': typeof StorageChannelsRoute
  '/profile/': typeof ProfileIndexRoute
  '/storage/': typeof StorageIndexRoute
  '/storage/offers/placed': typeof StorageOffersPlacedRoute
  '/storage/offers/received': typeof StorageOffersReceivedRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/activity'
    | '/market'
    | '/profile'
    | '/wallet'
    | '/storage'
    | '/activity/channels'
    | '/activity/gifts'
    | '/market/channels'
    | '/market/gifts'
    | '/market/stickers'
    | '/profile/stats'
    | '/storage/activity'
    | '/storage/channels'
    | '/profile/'
    | '/storage/'
    | '/storage/offers/placed'
    | '/storage/offers/received'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/activity'
    | '/market'
    | '/wallet'
    | '/activity/channels'
    | '/activity/gifts'
    | '/market/channels'
    | '/market/gifts'
    | '/market/stickers'
    | '/profile/stats'
    | '/storage/activity'
    | '/storage/channels'
    | '/profile'
    | '/storage'
    | '/storage/offers/placed'
    | '/storage/offers/received'
  id:
    | '__root__'
    | '/'
    | '/activity'
    | '/market'
    | '/profile'
    | '/wallet'
    | '/storage'
    | '/activity/channels'
    | '/activity/gifts'
    | '/market/channels'
    | '/market/gifts'
    | '/market/stickers'
    | '/profile/stats'
    | '/storage/activity'
    | '/storage/channels'
    | '/profile/'
    | '/storage/'
    | '/storage/offers/placed'
    | '/storage/offers/received'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivityRouteRoute: typeof ActivityRouteRouteWithChildren
  MarketRouteRoute: typeof MarketRouteRouteWithChildren
  ProfileRouteRoute: typeof ProfileRouteRouteWithChildren
  WalletRouteRoute: typeof WalletRouteRoute
  StorageRoute: typeof StorageRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/storage': {
      id: '/storage'
      path: '/storage'
      fullPath: '/storage'
      preLoaderRoute: typeof StorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wallet': {
      id: '/wallet'
      path: '/wallet'
      fullPath: '/wallet'
      preLoaderRoute: typeof WalletRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activity': {
      id: '/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof ActivityRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/storage/': {
      id: '/storage/'
      path: '/'
      fullPath: '/storage/'
      preLoaderRoute: typeof StorageIndexRouteImport
      parentRoute: typeof StorageRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof ProfileRouteRoute
    }
    '/storage/channels': {
      id: '/storage/channels'
      path: '/channels'
      fullPath: '/storage/channels'
      preLoaderRoute: typeof StorageChannelsRouteImport
      parentRoute: typeof StorageRoute
    }
    '/storage/activity': {
      id: '/storage/activity'
      path: '/activity'
      fullPath: '/storage/activity'
      preLoaderRoute: typeof StorageActivityRouteImport
      parentRoute: typeof StorageRoute
    }
    '/profile/stats': {
      id: '/profile/stats'
      path: '/stats'
      fullPath: '/profile/stats'
      preLoaderRoute: typeof ProfileStatsRouteImport
      parentRoute: typeof ProfileRouteRoute
    }
    '/market/stickers': {
      id: '/market/stickers'
      path: '/stickers'
      fullPath: '/market/stickers'
      preLoaderRoute: typeof MarketStickersRouteImport
      parentRoute: typeof MarketRouteRoute
    }
    '/market/gifts': {
      id: '/market/gifts'
      path: '/gifts'
      fullPath: '/market/gifts'
      preLoaderRoute: typeof MarketGiftsRouteImport
      parentRoute: typeof MarketRouteRoute
    }
    '/market/channels': {
      id: '/market/channels'
      path: '/channels'
      fullPath: '/market/channels'
      preLoaderRoute: typeof MarketChannelsRouteImport
      parentRoute: typeof MarketRouteRoute
    }
    '/activity/gifts': {
      id: '/activity/gifts'
      path: '/gifts'
      fullPath: '/activity/gifts'
      preLoaderRoute: typeof ActivityGiftsRouteImport
      parentRoute: typeof ActivityRouteRoute
    }
    '/activity/channels': {
      id: '/activity/channels'
      path: '/channels'
      fullPath: '/activity/channels'
      preLoaderRoute: typeof ActivityChannelsRouteImport
      parentRoute: typeof ActivityRouteRoute
    }
    '/storage/offers/received': {
      id: '/storage/offers/received'
      path: '/offers/received'
      fullPath: '/storage/offers/received'
      preLoaderRoute: typeof StorageOffersReceivedRouteImport
      parentRoute: typeof StorageRoute
    }
    '/storage/offers/placed': {
      id: '/storage/offers/placed'
      path: '/offers/placed'
      fullPath: '/storage/offers/placed'
      preLoaderRoute: typeof StorageOffersPlacedRouteImport
      parentRoute: typeof StorageRoute
    }
  }
}

interface ActivityRouteRouteChildren {
  ActivityChannelsRoute: typeof ActivityChannelsRoute
  ActivityGiftsRoute: typeof ActivityGiftsRoute
}

const ActivityRouteRouteChildren: ActivityRouteRouteChildren = {
  ActivityChannelsRoute: ActivityChannelsRoute,
  ActivityGiftsRoute: ActivityGiftsRoute,
}

const ActivityRouteRouteWithChildren = ActivityRouteRoute._addFileChildren(
  ActivityRouteRouteChildren,
)

interface MarketRouteRouteChildren {
  MarketChannelsRoute: typeof MarketChannelsRoute
  MarketGiftsRoute: typeof MarketGiftsRoute
  MarketStickersRoute: typeof MarketStickersRoute
}

const MarketRouteRouteChildren: MarketRouteRouteChildren = {
  MarketChannelsRoute: MarketChannelsRoute,
  MarketGiftsRoute: MarketGiftsRoute,
  MarketStickersRoute: MarketStickersRoute,
}

const MarketRouteRouteWithChildren = MarketRouteRoute._addFileChildren(
  MarketRouteRouteChildren,
)

interface ProfileRouteRouteChildren {
  ProfileStatsRoute: typeof ProfileStatsRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
}

const ProfileRouteRouteChildren: ProfileRouteRouteChildren = {
  ProfileStatsRoute: ProfileStatsRoute,
  ProfileIndexRoute: ProfileIndexRoute,
}

const ProfileRouteRouteWithChildren = ProfileRouteRoute._addFileChildren(
  ProfileRouteRouteChildren,
)

interface StorageRouteChildren {
  StorageActivityRoute: typeof StorageActivityRoute
  StorageChannelsRoute: typeof StorageChannelsRoute
  StorageIndexRoute: typeof StorageIndexRoute
  StorageOffersPlacedRoute: typeof StorageOffersPlacedRoute
  StorageOffersReceivedRoute: typeof StorageOffersReceivedRoute
}

const StorageRouteChildren: StorageRouteChildren = {
  StorageActivityRoute: StorageActivityRoute,
  StorageChannelsRoute: StorageChannelsRoute,
  StorageIndexRoute: StorageIndexRoute,
  StorageOffersPlacedRoute: StorageOffersPlacedRoute,
  StorageOffersReceivedRoute: StorageOffersReceivedRoute,
}

const StorageRouteWithChildren =
  StorageRoute._addFileChildren(StorageRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivityRouteRoute: ActivityRouteRouteWithChildren,
  MarketRouteRoute: MarketRouteRouteWithChildren,
  ProfileRouteRoute: ProfileRouteRouteWithChildren,
  WalletRouteRoute: WalletRouteRoute,
  StorageRoute: StorageRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
