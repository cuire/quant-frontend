/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TonConnectRouteImport } from './routes/ton-connect'
import { Route as ThemeParamsRouteImport } from './routes/theme-params'
import { Route as LaunchParamsRouteImport } from './routes/launch-params'
import { Route as InitDataRouteImport } from './routes/init-data'
import { Route as IndexRouteImport } from './routes/index'

const TonConnectRoute = TonConnectRouteImport.update({
  id: '/ton-connect',
  path: '/ton-connect',
  getParentRoute: () => rootRouteImport,
} as any)
const ThemeParamsRoute = ThemeParamsRouteImport.update({
  id: '/theme-params',
  path: '/theme-params',
  getParentRoute: () => rootRouteImport,
} as any)
const LaunchParamsRoute = LaunchParamsRouteImport.update({
  id: '/launch-params',
  path: '/launch-params',
  getParentRoute: () => rootRouteImport,
} as any)
const InitDataRoute = InitDataRouteImport.update({
  id: '/init-data',
  path: '/init-data',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/init-data': typeof InitDataRoute
  '/launch-params': typeof LaunchParamsRoute
  '/theme-params': typeof ThemeParamsRoute
  '/ton-connect': typeof TonConnectRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/init-data': typeof InitDataRoute
  '/launch-params': typeof LaunchParamsRoute
  '/theme-params': typeof ThemeParamsRoute
  '/ton-connect': typeof TonConnectRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/init-data': typeof InitDataRoute
  '/launch-params': typeof LaunchParamsRoute
  '/theme-params': typeof ThemeParamsRoute
  '/ton-connect': typeof TonConnectRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/init-data'
    | '/launch-params'
    | '/theme-params'
    | '/ton-connect'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/init-data' | '/launch-params' | '/theme-params' | '/ton-connect'
  id:
    | '__root__'
    | '/'
    | '/init-data'
    | '/launch-params'
    | '/theme-params'
    | '/ton-connect'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InitDataRoute: typeof InitDataRoute
  LaunchParamsRoute: typeof LaunchParamsRoute
  ThemeParamsRoute: typeof ThemeParamsRoute
  TonConnectRoute: typeof TonConnectRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ton-connect': {
      id: '/ton-connect'
      path: '/ton-connect'
      fullPath: '/ton-connect'
      preLoaderRoute: typeof TonConnectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/theme-params': {
      id: '/theme-params'
      path: '/theme-params'
      fullPath: '/theme-params'
      preLoaderRoute: typeof ThemeParamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/launch-params': {
      id: '/launch-params'
      path: '/launch-params'
      fullPath: '/launch-params'
      preLoaderRoute: typeof LaunchParamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/init-data': {
      id: '/init-data'
      path: '/init-data'
      fullPath: '/init-data'
      preLoaderRoute: typeof InitDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InitDataRoute: InitDataRoute,
  LaunchParamsRoute: LaunchParamsRoute,
  ThemeParamsRoute: ThemeParamsRoute,
  TonConnectRoute: TonConnectRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
