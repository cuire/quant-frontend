/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StorageRouteImport } from './routes/storage'
import { Route as ActivityRouteImport } from './routes/activity'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StorageIndexRouteImport } from './routes/storage/index'
import { Route as StorageChannelsRouteImport } from './routes/storage/channels'
import { Route as StorageActivityRouteImport } from './routes/storage/activity'
import { Route as StorageOffersReceivedRouteImport } from './routes/storage/offers/received'
import { Route as StorageOffersPlacedRouteImport } from './routes/storage/offers/placed'

const StorageRoute = StorageRouteImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivityRoute = ActivityRouteImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StorageIndexRoute = StorageIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StorageRoute,
} as any)
const StorageChannelsRoute = StorageChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => StorageRoute,
} as any)
const StorageActivityRoute = StorageActivityRouteImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => StorageRoute,
} as any)
const StorageOffersReceivedRoute = StorageOffersReceivedRouteImport.update({
  id: '/offers/received',
  path: '/offers/received',
  getParentRoute: () => StorageRoute,
} as any)
const StorageOffersPlacedRoute = StorageOffersPlacedRouteImport.update({
  id: '/offers/placed',
  path: '/offers/placed',
  getParentRoute: () => StorageRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activity': typeof ActivityRoute
  '/storage': typeof StorageRouteWithChildren
  '/storage/activity': typeof StorageActivityRoute
  '/storage/channels': typeof StorageChannelsRoute
  '/storage/': typeof StorageIndexRoute
  '/storage/offers/placed': typeof StorageOffersPlacedRoute
  '/storage/offers/received': typeof StorageOffersReceivedRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activity': typeof ActivityRoute
  '/storage/activity': typeof StorageActivityRoute
  '/storage/channels': typeof StorageChannelsRoute
  '/storage': typeof StorageIndexRoute
  '/storage/offers/placed': typeof StorageOffersPlacedRoute
  '/storage/offers/received': typeof StorageOffersReceivedRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/activity': typeof ActivityRoute
  '/storage': typeof StorageRouteWithChildren
  '/storage/activity': typeof StorageActivityRoute
  '/storage/channels': typeof StorageChannelsRoute
  '/storage/': typeof StorageIndexRoute
  '/storage/offers/placed': typeof StorageOffersPlacedRoute
  '/storage/offers/received': typeof StorageOffersReceivedRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/activity'
    | '/storage'
    | '/storage/activity'
    | '/storage/channels'
    | '/storage/'
    | '/storage/offers/placed'
    | '/storage/offers/received'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/activity'
    | '/storage/activity'
    | '/storage/channels'
    | '/storage'
    | '/storage/offers/placed'
    | '/storage/offers/received'
  id:
    | '__root__'
    | '/'
    | '/activity'
    | '/storage'
    | '/storage/activity'
    | '/storage/channels'
    | '/storage/'
    | '/storage/offers/placed'
    | '/storage/offers/received'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivityRoute: typeof ActivityRoute
  StorageRoute: typeof StorageRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/storage': {
      id: '/storage'
      path: '/storage'
      fullPath: '/storage'
      preLoaderRoute: typeof StorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activity': {
      id: '/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof ActivityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/storage/': {
      id: '/storage/'
      path: '/'
      fullPath: '/storage/'
      preLoaderRoute: typeof StorageIndexRouteImport
      parentRoute: typeof StorageRoute
    }
    '/storage/channels': {
      id: '/storage/channels'
      path: '/channels'
      fullPath: '/storage/channels'
      preLoaderRoute: typeof StorageChannelsRouteImport
      parentRoute: typeof StorageRoute
    }
    '/storage/activity': {
      id: '/storage/activity'
      path: '/activity'
      fullPath: '/storage/activity'
      preLoaderRoute: typeof StorageActivityRouteImport
      parentRoute: typeof StorageRoute
    }
    '/storage/offers/received': {
      id: '/storage/offers/received'
      path: '/offers/received'
      fullPath: '/storage/offers/received'
      preLoaderRoute: typeof StorageOffersReceivedRouteImport
      parentRoute: typeof StorageRoute
    }
    '/storage/offers/placed': {
      id: '/storage/offers/placed'
      path: '/offers/placed'
      fullPath: '/storage/offers/placed'
      preLoaderRoute: typeof StorageOffersPlacedRouteImport
      parentRoute: typeof StorageRoute
    }
  }
}

interface StorageRouteChildren {
  StorageActivityRoute: typeof StorageActivityRoute
  StorageChannelsRoute: typeof StorageChannelsRoute
  StorageIndexRoute: typeof StorageIndexRoute
  StorageOffersPlacedRoute: typeof StorageOffersPlacedRoute
  StorageOffersReceivedRoute: typeof StorageOffersReceivedRoute
}

const StorageRouteChildren: StorageRouteChildren = {
  StorageActivityRoute: StorageActivityRoute,
  StorageChannelsRoute: StorageChannelsRoute,
  StorageIndexRoute: StorageIndexRoute,
  StorageOffersPlacedRoute: StorageOffersPlacedRoute,
  StorageOffersReceivedRoute: StorageOffersReceivedRoute,
}

const StorageRouteWithChildren =
  StorageRoute._addFileChildren(StorageRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivityRoute: ActivityRoute,
  StorageRoute: StorageRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
